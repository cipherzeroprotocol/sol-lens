const notebook = {
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "title-cell",
        "language": "markdown"
      },
      "source": [
        "# Dusting Attack Analysis and Visualization",
        "",
        "This notebook analyzes patterns and impact of dusting attacks on the Solana blockchain."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "imports-cell",
        "language": "javascript"
      },
      "source": [
        "// Import libraries",
        "import {Chart} from \"chart.js\"",
        "import * as d3 from \"d3\"",
        "import { loadVisualizationData } from \"../utils/data-loader.js\"",
        "import { fetchFromCollector, hasCollector } from \"../utils/collector-connector.js\""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "data-source-cell",
        "language": "javascript"
      },
      "source": [
        "// Main notebook variables",
        "viewof dataSource = Inputs.radio(",
        "  [\"Sample Data\", \"Upload File\", \"Fetch from API\"],",
        "  {value: \"Sample Data\", label: \"Data Source\"}",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "file-upload-cell",
        "language": "javascript"
      },
      "source": [
        "// File upload component",
        "viewof fileUpload = Inputs.file({label: \"Upload JSON file\", accept: \".json\", required: false})"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "data-loading-cell",
        "language": "javascript"
      },
      "source": [
        "// Data loading function based on selected source",
        "data = {",
        "  if (dataSource === \"Sample Data\") {",
        "    return dustingSampleData;",
        "  } else if (dataSource === \"Upload File\") {",
        "    const fileData = viewof fileUpload.value;",
        "    return fileData ? JSON.parse(await fileData.text()) : dustingSampleData;",
        "  } else {",
        "    // Use real data from dusting collector",
        "    try {",
        "      if (!hasCollector('dusting')) {",
        "        throw new Error('Dusting collector not available');",
        "      }",
        "      ",
        "      // Show loading indicator",
        "      const loadingMsg = md`**Loading dusting attack data from blockchain...**  \nThis may take a moment as we analyze address poisoning attempts.`;",
        "      yield loadingMsg;",
        "      ",
        "      // Fetch real dusting attack data - 30 days of activity",
        "      const dustingData = await fetchFromCollector('dusting', 'detect_dusting_attacks', 30);",
        "      ",
        "      // Transform the data to match the expected format (if needed)",
        "      if (dustingData && dustingData.campaigns && dustingData.campaigns.length > 0) {",
        "        return dustingData.campaigns.map(campaign => ({",
        "          campaign_id: campaign.id || `dust-${campaign.source_address.substring(0, 8)}`,",
        "          source_address: campaign.source_address,",
        "          timestamp: campaign.start_time || new Date().toISOString(),",
        "          addresses_targeted: campaign.target_count || campaign.addresses?.length || 0,",
        "          transaction_count: campaign.tx_count || 0,",
        "          dust_value_usd: campaign.total_value_usd || 0,",
        "          token_symbol: campaign.token_symbol || 'UNKNOWN',",
        "          target_groups: campaign.target_groups || [{",
        "            type: \"regular\",",
        "            address_count: campaign.target_count || 0,",
        "            dust_value_usd: campaign.total_value_usd || 0",
        "          }]",
        "        }));",
        "      }",
        "      ",
        "      // Log info about fallback",
        "      console.log('No dusting campaigns found, using sample data');",
        "      return dustingSampleData.map(item => ({",
        "        ...item,",
        "        _note: 'Sample data (real data unavailable)'",
        "      }));",
        "    } catch (error) {",
        "      console.error(\"Error loading dusting attack data:\", error);",
        "      return dustingSampleData.map(item => ({",
        "        ...item,",
        "        _error: error.message,",
        "        _note: 'Sample data due to collector error'",
        "      }));",
        "    }",
        "  }",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "date-range-cell",
        "language": "javascript"
      },
      "source": [
        "// Date range filter",
        "viewof dateRange = Inputs.range(",
        "  [new Date(\"2023-01-01\"), new Date(\"2023-10-31\")],",
        "  {value: [new Date(\"2023-07-01\"), new Date(\"2023-10-31\")], ",
        "   step: 86400000, // one day",
        "   label: \"Date Range\"}",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "min-transactions-cell",
        "language": "javascript"
      },
      "source": [
        "// Filter for minimum transaction count",
        "viewof minTransactions = Inputs.range(",
        "  [1, 100],",
        "  {value: 5, step: 1, label: \"Minimum Transaction Count\"}",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "min-dust-value-cell",
        "language": "javascript"
      },
      "source": [
        "// Filter for minimum dust amount",
        "viewof minDustValueUSD = Inputs.range(",
        "  [0, 1],",
        "  {value: 0.01, step: 0.01, label: \"Minimum Dust Value (USD)\"}",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "filtered-data-cell",
        "language": "javascript"
      },
      "source": [
        "// Filtered data based on user inputs",
        "filteredData = {",
        "  const startDate = dateRange[0];",
        "  const endDate = dateRange[1];",
        "  ",
        "  return data.filter(d => {",
        "    const date = new Date(d.timestamp);",
        "    return date >= startDate && ",
        "           date <= endDate && ",
        "           d.transaction_count >= minTransactions &&",
        "           d.dust_value_usd >= minDustValueUSD;",
        "  });",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "summary-cell",
        "language": "javascript"
      },
      "source": [
        "// Summary statistics",
        "summary = {",
        "  if (!filteredData.length) return \"No data matching the filters\";",
        "  ",
        "  const totalDustTxs = d3.sum(filteredData, d => d.transaction_count);",
        "  const totalAddressesTargeted = d3.sum(filteredData, d => d.addresses_targeted);",
        "  const totalDustValueUSD = d3.sum(filteredData, d => d.dust_value_usd);",
        "  const avgDustPerTx = totalDustValueUSD / totalDustTxs;",
        "  ",
        "  return md`",
        "  ## Dusting Attack Summary",
        "  ",
        "  - **Total Dust Transactions**: ${totalDustTxs.toLocaleString()}",
        "  - **Total Addresses Targeted**: ${totalAddressesTargeted.toLocaleString()}",
        "  - **Total Dust Value**: $${totalDustValueUSD.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}",
        "  - **Average Dust Per Transaction**: $${avgDustPerTx.toLocaleString(undefined, {minimumFractionDigits: 4, maximumFractionDigits: 4})}",
        "  - **Number of Dusting Campaigns**: ${filteredData.length}",
        "  `;",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "time-chart-cell",
        "language": "javascript"
      },
      "source": [
        "// Time series chart of dusting attacks",
        "dustingTimeChart = {",
        "  // Group by day and sum values",
        "  const timeData = d3.rollup(",
        "    filteredData,",
        "    v => ({",
        "      transactions: d3.sum(v, d => d.transaction_count),",
        "      addresses: d3.sum(v, d => d.addresses_targeted),",
        "      value: d3.sum(v, d => d.dust_value_usd)",
        "    }),",
        "    d => d3.timeDay(new Date(d.timestamp))",
        "  );",
        "  ",
        "  // Convert to array for charting",
        "  const chartData = Array.from(timeData, ([date, data]) => ({",
        "    date,",
        "    transactions: data.transactions,",
        "    addresses: data.addresses,",
        "    value: data.value",
        "  })).sort((a, b) => a.date - b.date);",
        "  ",
        "  // Create the chart",
        "  const width = 800;",
        "  const height = 400;",
        "  const margin = {top: 20, right: 30, bottom: 30, left: 40};",
        "  ",
        "  const svg = d3.create(\"svg\")",
        "      .attr(\"width\", width)",
        "      .attr(\"height\", height);",
        "  ",
        "  const x = d3.scaleTime()",
        "      .domain(d3.extent(chartData, d => d.date))",
        "      .range([margin.left, width - margin.right]);",
        "  ",
        "  const y1 = d3.scaleLinear()",
        "      .domain([0, d3.max(chartData, d => d.transactions)])",
        "      .nice()",
        "      .range([height - margin.bottom, margin.top]);",
        "  ",
        "  const y2 = d3.scaleLinear()",
        "      .domain([0, d3.max(chartData, d => d.value)])",
        "      .nice()",
        "      .range([height - margin.bottom, margin.top]);",
        "  ",
        "  const line1 = d3.line()",
        "      .defined(d => !isNaN(d.transactions))",
        "      .x(d => x(d.date))",
        "      .y(d => y1(d.transactions));",
        "  ",
        "  const line2 = d3.line()",
        "      .defined(d => !isNaN(d.value))",
        "      .x(d => x(d.date))",
        "      .y(d => y2(d.value));",
        "  ",
        "  svg.append(\"g\")",
        "      .attr(\"transform\", `translate(0,${height - margin.bottom})`)",
        "      .call(d3.axisBottom(x));",
        "  ",
        "  svg.append(\"g\")",
        "      .attr(\"transform\", `translate(${margin.left},0)`)",
        "      .call(d3.axisLeft(y1))",
        "      .append(\"text\")",
        "      .attr(\"y\", 10)",
        "      .attr(\"fill\", \"steelblue\")",
        "      .text(\"Transaction Count\");",
        "  ",
        "  svg.append(\"g\")",
        "      .attr(\"transform\", `translate(${width - margin.right},0)`)",
        "      .call(d3.axisRight(y2))",
        "      .append(\"text\")",
        "      .attr(\"y\", 10)",
        "      .attr(\"fill\", \"orange\")",
        "      .text(\"USD Value\");",
        "  ",
        "  svg.append(\"path\")",
        "      .datum(chartData)",
        "      .attr(\"fill\", \"none\")",
        "      .attr(\"stroke\", \"steelblue\")",
        "      .attr(\"stroke-width\", 1.5)",
        "      .attr(\"d\", line1);",
        "  ",
        "  svg.append(\"path\")",
        "      .datum(chartData)",
        "      .attr(\"fill\", \"none\")",
        "      .attr(\"stroke\", \"orange\")",
        "      .attr(\"stroke-width\", 1.5)",
        "      .attr(\"d\", line2);",
        "  ",
        "  return svg.node();",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tokens-chart-cell",
        "language": "javascript"
      },
      "source": [
        "// Bar chart of top tokens used in dusting attacks",
        "topTokensChart = {",
        "  // Group by token",
        "  const tokenData = d3.rollup(",
        "    filteredData,",
        "    v => ({",
        "      transactions: d3.sum(v, d => d.transaction_count),",
        "      value: d3.sum(v, d => d.dust_value_usd)",
        "    }),",
        "    d => d.token_symbol",
        "  );",
        "  ",
        "  // Convert to array and sort by transaction count",
        "  const chartData = Array.from(tokenData, ([token, data]) => ({",
        "    token,",
        "    transactions: data.transactions,",
        "    value: data.value",
        "  }))",
        "  .sort((a, b) => b.transactions - a.transactions)",
        "  .slice(0, 10);",
        "  ",
        "  // Create chart",
        "  const height = 400;",
        "  const margin = {top: 30, right: 0, bottom: 30, left: 40};",
        "  const width = chartData.length * 60 + margin.left + margin.right;",
        "  ",
        "  const svg = d3.create(\"svg\")",
        "      .attr(\"width\", width)",
        "      .attr(\"height\", height);",
        "  ",
        "  const x = d3.scaleBand()",
        "      .domain(chartData.map(d => d.token))",
        "      .range([margin.left, width - margin.right])",
        "      .padding(0.1);",
        "  ",
        "  const y = d3.scaleLinear()",
        "      .domain([0, d3.max(chartData, d => d.transactions)])",
        "      .nice()",
        "      .range([height - margin.bottom, margin.top]);",
        "  ",
        "  svg.append(\"g\")",
        "      .attr(\"transform\", `translate(0,${height - margin.bottom})`)",
        "      .call(d3.axisBottom(x));",
        "  ",
        "  svg.append(\"g\")",
        "      .attr(\"transform\", `translate(${margin.left},0)`)",
        "      .call(d3.axisLeft(y));",
        "  ",
        "  svg.append(\"text\")",
        "      .attr(\"x\", width / 2)",
        "      .attr(\"y\", margin.top / 2)",
        "      .attr(\"text-anchor\", \"middle\")",
        "      .attr(\"font-weight\", \"bold\")",
        "      .text(\"Top Tokens Used in Dusting Attacks\");",
        "  ",
        "  svg.selectAll(\"rect\")",
        "    .data(chartData)",
        "    .join(\"rect\")",
        "      .attr(\"x\", d => x(d.token))",
        "      .attr(\"y\", d => y(d.transactions))",
        "      .attr(\"height\", d => y(0) - y(d.transactions))",
        "      .attr(\"width\", x.bandwidth())",
        "      .attr(\"fill\", \"steelblue\")",
        "      .append(\"title\")",
        "      .text(d => `${d.token}: ${d.transactions.toLocaleString()} transactions\\n$${d.value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2})}`);",
        "  ",
        "  return svg.node();",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "network-diagram-cell",
        "language": "javascript"
      },
      "source": [
        "// Network diagram of dusting campaigns",
        "dustingNetworkDiagram = {",
        "  // Create network nodes and links",
        "  const nodes = [];",
        "  const links = [];",
        "  ",
        "  // Add source nodes (dusters)",
        "  filteredData.forEach((campaign, i) => {",
        "    nodes.push({",
        "      id: campaign.source_address,",
        "      group: \"duster\",",
        "      transactions: campaign.transaction_count,",
        "      valueUSD: campaign.dust_value_usd",
        "    });",
        "    ",
        "    // Add simplified target representation (in reality this would be many addresses)",
        "    campaign.target_groups.forEach((group, j) => {",
        "      const targetId = `target-${i}-${j}`;",
        "      nodes.push({",
        "        id: targetId,",
        "        group: group.type,",
        "        addresses: group.address_count,",
        "        valueUSD: group.dust_value_usd",
        "      });",
        "      ",
        "      links.push({",
        "        source: campaign.source_address,",
        "        target: targetId,",
        "        value: group.address_count",
        "      });",
        "    });",
        "  });",
        "  ",
        "  // Create force-directed graph",
        "  const width = 800;",
        "  const height = 600;",
        "  ",
        "  const svg = d3.create(\"svg\")",
        "      .attr(\"width\", width)",
        "      .attr(\"height\", height);",
        "  ",
        "  // Color scale for node types",
        "  const color = d3.scaleOrdinal()",
        "      .domain([\"duster\", \"exchange\", \"defi\", \"nft\", \"whale\", \"regular\"])",
        "      .range(d3.schemeCategory10);",
        "  ",
        "  // Node size scale",
        "  const size = d3.scaleLinear()",
        "      .domain([0, d3.max(nodes, d => d.transactions || d.addresses || 1)])",
        "      .range([5, 20]);",
        "  ",
        "  // Create simulation",
        "  const simulation = d3.forceSimulation(nodes)",
        "      .force(\"link\", d3.forceLink(links).id(d => d.id))",
        "      .force(\"charge\", d3.forceManyBody().strength(-200))",
        "      .force(\"center\", d3.forceCenter(width / 2, height / 2));",
        "  ",
        "  // Create the links",
        "  const link = svg.append(\"g\")",
        "      .attr(\"stroke\", \"#999\")",
        "      .attr(\"stroke-opacity\", 0.6)",
        "    .selectAll(\"line\")",
        "    .data(links)",
        "    .join(\"line\")",
        "      .attr(\"stroke-width\", d => Math.sqrt(d.value) * 0.5);",
        "  ",
        "  // Create the nodes",
        "  const node = svg.append(\"g\")",
        "      .attr(\"stroke\", \"#fff\")",
        "      .attr(\"stroke-width\", 1.5)",
        "    .selectAll(\"circle\")",
        "    .data(nodes)",
        "    .join(\"circle\")",
        "      .attr(\"r\", d => size(d.transactions || d.addresses || 1))",
        "      .attr(\"fill\", d => color(d.group))",
        "      .call(drag(simulation));",
        "  ",
        "  // Add tooltips",
        "  node.append(\"title\")",
        "      .text(d => {",
        "        if (d.group === \"duster\") {",
        "          return `Duster: ${d.id}\\nTransactions: ${d.transactions}\\nValue: $${d.valueUSD.toFixed(2)}`;",
        "        } else {",
        "          return `Target Group: ${d.group}\\nAddresses: ${d.addresses}\\nValue: $${d.valueUSD.toFixed(2)}`;",
        "        }",
        "      });",
        "  ",
        "  // Add legend",
        "  const legend = svg.append(\"g\")",
        "      .attr(\"font-family\", \"sans-serif\")",
        "      .attr(\"font-size\", 10)",
        "      .attr(\"text-anchor\", \"end\")",
        "      .selectAll(\"g\")",
        "      .data(color.domain())",
        "      .join(\"g\")",
        "        .attr(\"transform\", (d, i) => `translate(0,${i * 20})`);",
        "  ",
        "  legend.append(\"rect\")",
        "      .attr(\"x\", width - 19)",
        "      .attr(\"width\", 19)",
        "      .attr(\"height\", 19)",
        "      .attr(\"fill\", color);",
        "  ",
        "  legend.append(\"text\")",
        "      .attr(\"x\", width - 24)",
        "      .attr(\"y\", 9.5)",
        "      .attr(\"dy\", \"0.32em\")",
        "      .text(d => d);",
        "  ",
        "  // Update positions in simulation",
        "  simulation.on(\"tick\", () => {",
        "    link",
        "        .attr(\"x1\", d => d.source.x)",
        "        .attr(\"y1\", d => d.source.y)",
        "        .attr(\"x2\", d => d.target.x)",
        "        .attr(\"y2\", d => d.target.y);",
        "    ",
        "    node",
        "        .attr(\"cx\", d => d.x)",
        "        .attr(\"cy\", d => d.y);",
        "  });",
        "  ",
        "  // Drag function",
        "  function drag(simulation) {",
        "    function dragstarted(event) {",
        "      if (!event.active) simulation.alphaTarget(0.3).restart();",
        "      event.subject.fx = event.subject.x;",
        "      event.subject.fy = event.subject.y;",
        "    }",
        "    ",
        "    function dragged(event) {",
        "      event.subject.fx = event.x;",
        "      event.subject.fy = event.y;",
        "    }",
        "    ",
        "    function dragended(event) {",
        "      if (!event.active) simulation.alphaTarget(0);",
        "      event.subject.fx = null;",
        "      event.subject.fy = null;",
        "    }",
        "    ",
        "    return d3.drag()",
        "        .on(\"start\", dragstarted)",
        "        .on(\"drag\", dragged)",
        "        .on(\"end\", dragended);",
        "  }",
        "  ",
        "  return svg.node();",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "data-table-cell",
        "language": "javascript"
      },
      "source": [
        "// Data table of dusting campaigns",
        "viewof campaignTable = Inputs.table(filteredData, {",
        "  columns: [",
        "    \"campaign_id\",",
        "    \"source_address\",",
        "    \"timestamp\",",
        "    \"addresses_targeted\",",
        "    \"transaction_count\",",
        "    \"dust_value_usd\",",
        "    \"token_symbol\"",
        "  ],",
        "  width: {",
        "    source_address: 250,",
        "    timestamp: 180",
        "  },",
        "  format: {",
        "    dust_value_usd: x => `$${x.toFixed(4)}`",
        "  },",
        "  sort: \"timestamp\",",
        "  reverse: true",
        "})"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sample-data-cell",
        "language": "javascript"
      },
      "source": [
        "// Sample data for testing",
        "dustingSampleData = [",
        "  {",
        "    \"campaign_id\": \"dust-1\",",
        "    \"source_address\": \"Dust1111111111111111111111111111111111111111\",",
        "    \"timestamp\": \"2023-09-12T08:23:14Z\",",
        "    \"addresses_targeted\": 5642,",
        "    \"transaction_count\": 5642,",
        "    \"dust_value_usd\": 56.42,",
        "    \"token_symbol\": \"SOL\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 1245, \"dust_value_usd\": 12.45 },",
        "      { \"type\": \"defi\", \"address_count\": 892, \"dust_value_usd\": 8.92 },",
        "      { \"type\": \"nft\", \"address_count\": 2105, \"dust_value_usd\": 21.05 },",
        "      { \"type\": \"whale\", \"address_count\": 148, \"dust_value_usd\": 1.48 },",
        "      { \"type\": \"regular\", \"address_count\": 1252, \"dust_value_usd\": 12.52 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-2\",",
        "    \"source_address\": \"Dust2222222222222222222222222222222222222222\",",
        "    \"timestamp\": \"2023-08-15T14:12:33Z\",",
        "    \"addresses_targeted\": 3891,",
        "    \"transaction_count\": 3891,",
        "    \"dust_value_usd\": 38.91,",
        "    \"token_symbol\": \"USDC\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 782, \"dust_value_usd\": 7.82 },",
        "      { \"type\": \"defi\", \"address_count\": 563, \"dust_value_usd\": 5.63 },",
        "      { \"type\": \"nft\", \"address_count\": 1430, \"dust_value_usd\": 14.30 },",
        "      { \"type\": \"whale\", \"address_count\": 95, \"dust_value_usd\": 0.95 },",
        "      { \"type\": \"regular\", \"address_count\": 1021, \"dust_value_usd\": 10.21 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-3\",",
        "    \"source_address\": \"Dust3333333333333333333333333333333333333333\",",
        "    \"timestamp\": \"2023-09-28T10:45:22Z\",",
        "    \"addresses_targeted\": 7234,",
        "    \"transaction_count\": 7234,",
        "    \"dust_value_usd\": 72.34,",
        "    \"token_symbol\": \"BONK\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 1589, \"dust_value_usd\": 15.89 },",
        "      { \"type\": \"defi\", \"address_count\": 1021, \"dust_value_usd\": 10.21 },",
        "      { \"type\": \"nft\", \"address_count\": 2765, \"dust_value_usd\": 27.65 },",
        "      { \"type\": \"whale\", \"address_count\": 203, \"dust_value_usd\": 2.03 },",
        "      { \"type\": \"regular\", \"address_count\": 1656, \"dust_value_usd\": 16.56 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-4\",",
        "    \"source_address\": \"Dust4444444444444444444444444444444444444444\",",
        "    \"timestamp\": \"2023-07-05T16:33:44Z\",",
        "    \"addresses_targeted\": 2156,",
        "    \"transaction_count\": 2156,",
        "    \"dust_value_usd\": 21.56,",
        "    \"token_symbol\": \"USDT\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 476, \"dust_value_usd\": 4.76 },",
        "      { \"type\": \"defi\", \"address_count\": 312, \"dust_value_usd\": 3.12 },",
        "      { \"type\": \"nft\", \"address_count\": 803, \"dust_value_usd\": 8.03 },",
        "      { \"type\": \"whale\", \"address_count\": 62, \"dust_value_usd\": 0.62 },",
        "      { \"type\": \"regular\", \"address_count\": 503, \"dust_value_usd\": 5.03 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-5\",",
        "    \"source_address\": \"Dust5555555555555555555555555555555555555555\",",
        "    \"timestamp\": \"2023-10-02T09:12:18Z\",",
        "    \"addresses_targeted\": 4532,",
        "    \"transaction_count\": 4532,",
        "    \"dust_value_usd\": 45.32,",
        "    \"token_symbol\": \"SOL\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 987, \"dust_value_usd\": 9.87 },",
        "      { \"type\": \"defi\", \"address_count\": 652, \"dust_value_usd\": 6.52 },",
        "      { \"type\": \"nft\", \"address_count\": 1723, \"dust_value_usd\": 17.23 },",
        "      { \"type\": \"whale\", \"address_count\": 128, \"dust_value_usd\": 1.28 },",
        "      { \"type\": \"regular\", \"address_count\": 1042, \"dust_value_usd\": 10.42 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-6\",",
        "    \"source_address\": \"Dust6666666666666666666666666666666666666666\",",
        "    \"timestamp\": \"2023-08-23T11:34:56Z\",",
        "    \"addresses_targeted\": 3245,",
        "    \"transaction_count\": 3245,",
        "    \"dust_value_usd\": 32.45,",
        "    \"token_symbol\": \"BONK\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 712, \"dust_value_usd\": 7.12 },",
        "      { \"type\": \"defi\", \"address_count\": 468, \"dust_value_usd\": 4.68 },",
        "      { \"type\": \"nft\", \"address_count\": 1236, \"dust_value_usd\": 12.36 },",
        "      { \"type\": \"whale\", \"address_count\": 92, \"dust_value_usd\": 0.92 },",
        "      { \"type\": \"regular\", \"address_count\": 737, \"dust_value_usd\": 7.37 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-7\",",
        "    \"source_address\": \"Dust7777777777777777777777777777777777777777\",",
        "    \"timestamp\": \"2023-09-15T13:22:05Z\",",
        "    \"addresses_targeted\": 5123,",
        "    \"transaction_count\": 5123,",
        "    \"dust_value_usd\": 51.23,",
        "    \"token_symbol\": \"SAMO\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 1125, \"dust_value_usd\": 11.25 },",
        "      { \"type\": \"defi\", \"address_count\": 742, \"dust_value_usd\": 7.42 },",
        "      { \"type\": \"nft\", \"address_count\": 1953, \"dust_value_usd\": 19.53 },",
        "      { \"type\": \"whale\", \"address_count\": 146, \"dust_value_usd\": 1.46 },",
        "      { \"type\": \"regular\", \"address_count\": 1157, \"dust_value_usd\": 11.57 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-8\",",
        "    \"source_address\": \"Dust8888888888888888888888888888888888888888\",",
        "    \"timestamp\": \"2023-07-21T15:45:34Z\",",
        "    \"addresses_targeted\": 2876,",
        "    \"transaction_count\": 2876,",
        "    \"dust_value_usd\": 28.76,",
        "    \"token_symbol\": \"USDC\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 632, \"dust_value_usd\": 6.32 },",
        "      { \"type\": \"defi\", \"address_count\": 415, \"dust_value_usd\": 4.15 },",
        "      { \"type\": \"nft\", \"address_count\": 1095, \"dust_value_usd\": 10.95 },",
        "      { \"type\": \"whale\", \"address_count\": 82, \"dust_value_usd\": 0.82 },",
        "      { \"type\": \"regular\", \"address_count\": 652, \"dust_value_usd\": 6.52 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-9\",",
        "    \"source_address\": \"Dust9999999999999999999999999999999999999999\",",
        "    \"timestamp\": \"2023-10-08T12:10:45Z\",",
        "    \"addresses_targeted\": 6543,",
        "    \"transaction_count\": 6543,",
        "    \"dust_value_usd\": 65.43,",
        "    \"token_symbol\": \"SOL\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 1425, \"dust_value_usd\": 14.25 },",
        "      { \"type\": \"defi\", \"address_count\": 945, \"dust_value_usd\": 9.45 },",
        "      { \"type\": \"nft\", \"address_count\": 2485, \"dust_value_usd\": 24.85 },",
        "      { \"type\": \"whale\", \"address_count\": 183, \"dust_value_usd\": 1.83 },",
        "      { \"type\": \"regular\", \"address_count\": 1505, \"dust_value_usd\": 15.05 }",
        "    ]",
        "  },",
        "  {",
        "    \"campaign_id\": \"dust-10\",",
        "    \"source_address\": \"DustAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\",",
        "    \"timestamp\": \"2023-08-05T08:56:23Z\",",
        "    \"addresses_targeted\": 4321,",
        "    \"transaction_count\": 4321,",
        "    \"dust_value_usd\": 43.21,",
        "    \"token_symbol\": \"SAMO\",",
        "    \"target_groups\": [",
        "      { \"type\": \"exchange\", \"address_count\": 945, \"dust_value_usd\": 9.45 },",
        "      { \"type\": \"defi\", \"address_count\": 632, \"dust_value_usd\": 6.32 },",
        "      { \"type\": \"nft\", \"address_count\": 1642, \"dust_value_usd\": 16.42 },",
        "      { \"type\": \"whale\", \"address_count\": 128, \"dust_value_usd\": 1.28 },",
        "      { \"type\": \"regular\", \"address_count\": 974, \"dust_value_usd\": 9.74 }",
        "    ]",
        "  }",
        "]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "methodology-cell",
        "language": "markdown"
      },
      "source": [
        "## Dusting Attack Analysis Methodology",
        "",
        "This notebook analyzes dusting attacks on the Solana blockchain. Dusting attacks involve sending small amounts of tokens to many addresses to track and deanonymize them.",
        "",
        "**Methodology:**",
        "",
        "1. **Data Collection**: We collect transaction data from the Solana blockchain using the Helius API, focusing on transactions with very small amounts (dust).",
        "",
        "2. **Pattern Detection**: We identify dusting patterns by looking for:",
        "   - Single source address sending to many destinations",
        "   - Small transaction amounts (typically <$0.01 USD)",
        "   - High transaction counts from the same source",
        "   - Targeting of specific wallet types (exchanges, NFT holders, etc.)",
        "",
        "3. **Campaign Identification**: We group related dusting transactions into campaigns based on source address, timing, and token type.",
        "",
        "4. **Impact Analysis**: We analyze the reach and potential impact of each campaign based on number of addresses targeted and types of wallets.",
        "",
        "This analysis helps identify potential address poisoning attempts, tracking activity, and other forms of privacy attacks on the Solana network."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "export-format-cell",
        "language": "javascript"
      },
      "source": [
        "// Export functionality",
        "viewof exportFormat = Inputs.radio(",
        "  [\"JSON\", \"CSV\", \"PNG\"],",
        "  {value: \"JSON\", label: \"Export Format\"}",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "export-button-cell",
        "language": "javascript"
      },
      "source": [
        "viewof exportButton = Inputs.button(\"Export Data\")"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "export-data-cell",
        "language": "javascript"
      },
      "source": [
        "// Export handling",
        "exportData = {",
        "  if (viewof exportButton.value) {",
        "    if (exportFormat === \"JSON\") {",
        "      const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(filteredData));",
        "      const downloadLink = document.createElement(\"a\");",
        "      downloadLink.setAttribute(\"href\", dataStr);",
        "      downloadLink.setAttribute(\"download\", \"dusting_analysis.json\");",
        "      downloadLink.click();",
        "      return \"Data exported as JSON\";",
        "    } else if (exportFormat === \"CSV\") {",
        "      let csvContent = \"data:text/csv;charset=utf-8,\";",
        "      ",
        "      // Add header",
        "      const headers = Object.keys(filteredData[0]).filter(k => k !== \"target_groups\");",
        "      csvContent += headers.join(\",\") + \"\\r\\n\";",
        "      ",
        "      // Add rows",
        "      filteredData.forEach(row => {",
        "        const values = headers.map(header => {",
        "          const value = row[header];",
        "          return typeof value === 'string' ? `\"${value}\"` : value;",
        "        });",
        "        csvContent += values.join(\",\") + \"\\r\\n\";",
        "      });",
        "      ",
        "      const encodedUri = encodeURI(csvContent);",
        "      const downloadLink = document.createElement(\"a\");",
        "      downloadLink.setAttribute(\"href\", encodedUri);",
        "      downloadLink.setAttribute(\"download\", \"dusting_analysis.csv\");",
        "      downloadLink.click();",
        "      return \"Data exported as CSV\";",
        "    } else if (exportFormat === \"PNG\") {",
        "      // This would be implemented with additional libraries in a real environment",
        "      return \"PNG export not implemented in this example\";",
        "    }",
        "  }",
        "  return \"\";",
        "}"
      ]
    }
  ]
}